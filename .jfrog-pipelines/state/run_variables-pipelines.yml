resources:
- name: runVariablesResource
  type: PropertyBag
  configuration:
    some_key: some_value
- name: runVariablesResInt
  type: PropertyBag
  configuration:
    some_key: some_value

- name: run_varaibles_sanity
  type: PropertyBag
  configuration:
    some_key: some_value

pipelines:
- name: Sanity_test_run_variables
  steps:
  - name: stepA
    type: Bash
    configuration:
      outputResources:
        - name: runVariablesResource
    execution:
      onExecute:
        - add_run_variables "keyA=valueA"
  - name: stepB
    type: Bash
    configuration:
      affinityGroup: group
      inputResources:
        - name: runVariablesResource
      outputResources:
        - name: runVariablesResInt
    execution:
      onExecute:
        - echo $keyA
        - add_run_variables "keyA=valueB"
  - name: stepD
    type: Bash
    configuration:
      affinityGroup: group
    execution:
      onExecute:
        - echo $keyA
        - add_run_variables "keyA=valueC"
  - name: stepC
    configuration:
      runtime:
        type: host
      affinityGroup: group
      inputSteps:
        - name: stepD
      inputResources:
        - name: runVariablesResInt
        - name: runVariablesResource
    type: Bash
    execution:
      onExecute:
        - echo $keyA
        - cat /var/opt/jfrog/pipelines/reqKick/execute/step/prepData.js
  # - name: approve_sanity
  #   configuration:
  #     inputSteps:
  #       - name: stepC
  #     inputResources:
  #       - name: this_repo
  #       - name: run_varaibles_sanity
  #     integrations:
  #       - name: sanity_platform
  #   type: Bash
  #   execution:
  #     onExecute:
  #       - pushd ${res_this_repo_resourcePath}/scripts
  #       - npm ci
  #       - export API_URL="${int_sanity_platform_url}/pipelines/api/v1"
  #       - export API_TOKEN="Bearer ${int_sanity_platform_accessToken}"
  #       - node index.js sanityGate --stepName $qualityGateStep --runId $triggerRunId --approved --comment "approved all tests passed"

  # - name: reject_sanity
  #   configuration:
  #     inputSteps:
  #       - name: stepC
  #         status:
  #           - "failure"
  #           - "error"
  #           - "skipped"
  #           - "cancelled"
  #           - "timeout"
  #     inputResources:
  #       - name: this_repo
  #       - name: run_varaibles_sanity
  #     integrations:
  #       - name: sanity_platform
  #   type: Bash
  #   execution:
  #     onExecute:
  #       - pushd ${res_this_repo_resourcePath}/scripts
  #       - npm ci
  #       - export API_URL="${int_sanity_platform_url}/pipelines/api/v1"
  #       - export API_TOKEN="Bearer ${int_sanity_platform_accessToken}"
  #       - node index.js sanityGate --stepName $qualityGateStep --runId $triggerRunId --comment "rejected because few of the tests failed"
